; ***********************************************************************************

; 	LABS BlasterBoard sound card firmware
;	Copyright (C) 2021 Jevgenijs Ribalko (LABS)

;	This program is free software: you can redistribute it and/or modify
;	it under the terms of the GNU General Public License as published by
;	the Free Software Foundation, either version 3 of the License, or
;	(at your option) any later version.

;	This program is distributed in the hope that it will be useful,
;	but WITHOUT ANY WARRANTY; without even the implied warranty of
;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;	GNU General Public License for more details.

;	You should have received a copy of the GNU General Public License
;	along with this program.  If not, see <http://www.gnu.org/licenses/>.

; ***********************************************************************************

; ==============================================================================
; 	Software UART 
;
;	Used to echo incoming and outgoing data bytes
;	for debugging purposes.
;	Requires UART_ENABLE during compilation.
;
;	- UART is TX-only on PB1
;	- 2 MHz baud rate (20 clocks per bit @ 20 MHz)
;	- St-8-Sp
; ==============================================================================
	
; ------------------------------------------------------------------------------
; 	Output single character from A with 1 MHz baud rate
; ------------------------------------------------------------------------------
UART_PutChar:

	push	A
	
	; Start bit
	cbi	PORTB, TX_PIN 	; 2 (2)
	
	; Should be 8 cycles before next bit
	
	nop
	nop
	nop
	nop
	nop			; 5 (7)
	
	lsr	A		; 1 (8)
	brcc	_bit0_0		; 1 (false) (9) or 2 (true) (10)
	nop			; 1 (10)
	
	sbi	PORTB, TX_PIN	; 2 (2)
	rjmp	_next0		; 2 (4)
	
_bit0_0:
	cbi	PORTB, TX_PIN	; 2 (2)
	nop			; 1 (3)
	nop			; 1 (4)
_next0:
	nop	
	nop
	nop			; 3 (7)
	
	lsr	A		; 1 (8)
	brcc	_bit1_0		; 1 (false) (9) or 2 (true) (10)
	nop			; 1 (10)
	sbi	PORTB, TX_PIN	; 2 (2)
	rjmp	_next1		; 2 (4)
	
_bit1_0:
	cbi	PORTB, TX_PIN	; 2 (2)
	nop			; 1 (4)
	nop			; 1 (4)
_next1:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit2_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next2		; 2
	
_bit2_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next2:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit3_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next3		; 2
	
_bit3_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next3:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit4_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next4		; 2
	
_bit4_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next4:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit5_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next5		; 2
	
_bit5_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next5:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit6_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next6		; 2
	
_bit6_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next6:
	nop
	nop
	nop
	
	lsr	A		; 1 cycle
	brcc	_bit7_0		; 1 (false) or 2* (true*)
	nop			; 1
	sbi	PORTB, TX_PIN	; 2
	rjmp	_next7		; 2
	
_bit7_0:
	cbi	PORTB, TX_PIN	; 2*
	nop			; 1*
	nop			; 1*
_next7:
	nop
	nop
	nop
	
	; -------------------------
	; Stop bit
	sbi	PORTB, TX_PIN	; 2
	
	pop	A
	
	ret
	; NOT REACHED
